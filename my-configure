#! /bin/sh


# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
   && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
	as_echo='print -r --'
	as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
	as_echo='printf %s\n'
	as_echo_n='printf %s'
else
	if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
		as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
		as_echo_n='/usr/ucb/echo -n'
	else
		as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
		as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
		export as_echo_n_body
		as_echo_n='sh -c $as_echo_n_body as_echo'
	fi
	export as_echo_body
	as_echo='sh -c $as_echo_body as_echo'
fi





# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p








# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`




cat >config.log <<_ACEOF
This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by $as_me, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ $0 $@

_ACEOF
exec 5>>config.log



test -n "$DJDIR" || exec 7<&0 </dev/null
exec 6>&1



#-----------------------------------------------------------------------------#
# Java configuration
#

# jikes requires the usual Java SDK to run, so if we checked for javac first,
# then that's what we'd get. If the user has jikes installed, then that
# probably means that they want to use it, so we check for jikes before javac.
# On Windows, the Java SDK has a high chance of being installed in a path
# containing spaces.  The simplest solution is to keep only the basename.
# Everything will still work so long as the executables can be found on the
# PATH later.
for ac_prog in jikes javac gcj ; do
	 # Extract the first word of "$ac_prog", so it can be a program name with args.
	set dummy $ac_prog; ac_word=$2
	{
		$as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
		$as_echo_n "checking for $ac_word... " >&6;
	}
	if ${ac_cv_path_JAVAC+:} false; then :
	   $as_echo_n "(cached) " >&6
	else
		case $JAVAC in
		   [\\/]* | ?:[\\/]*)
			   ac_cv_path_JAVAC="$JAVAC" # Let the user override the test with a path.
				;;
			*)
				as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
				for as_dir in $PATH
				do
					IFS=$as_save_IFS
					test -z "$as_dir" && as_dir=.
					for ac_exec_ext in '' $ac_executable_extensions; do
						if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
							ac_cv_path_JAVAC="$as_dir/$ac_word$ac_exec_ext"
							$as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
							break 2
						fi
					done
				done
				IFS=$as_save_IFS
				;;
		esac
	fi
	JAVAC=$ac_cv_path_JAVAC
	if test -n "$JAVAC"; then
		{
			$as_echo "$as_me:${as_lineno-$LINENO}: result: $JAVAC" >&5
			$as_echo "$JAVAC" >&6;
		}
	else
		{
			$as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
			$as_echo "no" >&6;
		}
	fi


	test -n "$JAVAC" && break
done

case "$JAVAC" in
   *" "*)
      JAVAC=`basename "$JAVAC"`
      ;;
esac
case "$JAVAC" in
   *gcj)
      JAVAC="$JAVAC -C"
      ;;
esac
# Extract the first word of "java gij", so it can be a program name with args.
set dummy java gij; ac_word=$2
{
	$as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
	$as_echo_n "checking for $ac_word... " >&6;
}
if ${ac_cv_path_JAVA_INTERPRETER+:} false; then :
	$as_echo_n "(cached) " >&6
else
	case $JAVA_INTERPRETER in
		[\\/]* | ?:[\\/]*)
			ac_cv_path_JAVA_INTERPRETER="$JAVA_INTERPRETER" # Let the user override the test with a path.
			;;
		*)
			as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
			for as_dir in $PATH
			do
				IFS=$as_save_IFS
				test -z "$as_dir" && as_dir=.
				for ac_exec_ext in '' $ac_executable_extensions; do
					if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
						ac_cv_path_JAVA_INTERPRETER="$as_dir/$ac_word$ac_exec_ext"
						$as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
						break 2
					fi
				done
			done
			IFS=$as_save_IFS

			;;
	esac
fi
JAVA_INTERPRETER=$ac_cv_path_JAVA_INTERPRETER
if test -n "$JAVA_INTERPRETER"; then
	{
		$as_echo "$as_me:${as_lineno-$LINENO}: result: $JAVA_INTERPRETER" >&5
		$as_echo "$JAVA_INTERPRETER" >&6;
	}
else
	{
		$as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
		$as_echo "no" >&6;
	}
fi


case "$JAVA_INTERPRETER" in
   *" "*)
      JAVA_INTERPRETER=`basename "$JAVA_INTERPRETER"`
      ;;
esac
# Extract the first word of "jar", so it can be a program name with args.
set dummy jar; ac_word=$2
{
	$as_echo "$as_me:${as_lineno-$LINENO}: checking for $ac_word" >&5
	$as_echo_n "checking for $ac_word... " >&6;
}
if ${ac_cv_path_JAR+:} false; then :
	$as_echo_n "(cached) " >&6
else
	case $JAR in
		[\\/]* | ?:[\\/]*)
			ac_cv_path_JAR="$JAR" # Let the user override the test with a path.
			;;
		*)
			as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
			for as_dir in $PATH
			do
				IFS=$as_save_IFS
				test -z "$as_dir" && as_dir=.
				for ac_exec_ext in '' $ac_executable_extensions; do
					if as_fn_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
						ac_cv_path_JAR="$as_dir/$ac_word$ac_exec_ext"
						$as_echo "$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext" >&5
						break 2
					fi
				done
			done
			IFS=$as_save_IFS

			;;
	esac
fi
JAR=$ac_cv_path_JAR
if test -n "$JAR"; then
	{
		$as_echo "$as_me:${as_lineno-$LINENO}: result: $JAR" >&5
		$as_echo "$JAR" >&6;
	}
else
	{
		$as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
		$as_echo "no" >&6;
	}
fi


case "$JAR" in
   *" "*)
      JAR=`basename "$JAR"`
      ;;
esac

if ${mercury_cv_java+:} false; then :
	$as_echo_n "(cached) " >&6
else

	if test "$JAVAC" != "" -a "$JAVA_INTERPRETER" != "" -a "$JAR" != ""; then
		{
			$as_echo "$as_me:${as_lineno-$LINENO}: checking if the above Java SDK works and is sufficiently recent" >&5
			$as_echo_n "checking if the above Java SDK works and is sufficiently recent... " >&6;
		}
		cat > conftest.java << EOF
		// This program simply retrieves the constant
		// specifying the version number of the Java SDK and
		// checks it is at least 1.5, printing "Hello, world"
		// if successful.
		public class conftest {
		    public static void main (String[] args) {
			float	version;
			String	strVer = System.getProperty(
					"java.specification.version");

			try {
				version = Float.valueOf(strVer).floatValue();
			}
			catch (NumberFormatException e) {
				System.out.println("ERROR: \"java." +
						"specification.version\" " +
						"constant has incorrect " +
						"format.\nGot \"" + strVer +
						"\", expected a number.");
				version = 0f;
			}

			if (version >= 1.5f) {
				System.out.println("Hello, world\n");
			} else {
				System.out.println("Nope, sorry.\n");
			}
		    }
		}
EOF
		if
			echo "$JAVAC" conftest.java >&5 2>&1 &&
			"$JAVAC" conftest.java >&5 2>&1 &&
			echo "$JAVA_INTERPRETER" conftest > conftest.out 2>&5 &&
			CLASSPATH=. "$JAVA_INTERPRETER" conftest > conftest.out 2>&5 &&
			test "`tr -d '\015' < conftest.out`" = "Hello, world"
		then
			mercury_cv_java="yes"
		else
			mercury_cv_java="no"
		fi
		{
			$as_echo "$as_me:${as_lineno-$LINENO}: result: $mercury_cv_java" >&5
			$as_echo "$mercury_cv_java" >&6;
		}
	else
		if test "$JAVAC" = ""; then
			JAVAC="javac"
		fi
		if test "$JAVA_INTERPRETER" = ""; then
			JAVA_INTERPRETER="java"
		fi
		if test "$JAR" = ""; then
			JAR="jar"
		fi
		mercury_cv_java="no"
	fi

fi







# Check whether --enable-javac-flags-for-heap-size was given.
if test "${enable_javac_flags_for_heap_size+set}" = set; then :
	enableval=$enable_javac_flags_for_heap_size; enable_javac_flags_for_heap_size="$enableval"
else
	enable_javac_flags_for_heap_size=yes
fi


case "$enable_javac_flags_for_heap_size" in
   yes)

# The default maximum heap size is too small to build the standard library and
# other programs so we need to increase it.  The option to do that is
# non-standard so we have to check that it is accepted.
		if ${mercury_cv_javac_flags_for_heap_size+:} false; then :
			$as_echo_n "(cached) " >&6
		else

			if test "$mercury_cv_java" = "yes"
			then
				{
					$as_echo "$as_me:${as_lineno-$LINENO}: checking if the Java compiler accepts the max heap size option" >&5
					$as_echo_n "checking if the Java compiler accepts the max heap size option... " >&6;
				}
	# There are two versions of this.  The _test version is the one we test
	# here.  The second one, with the escaped quotes, is the one that gets
	# included in the output files.  The quotes are necessary in order for
	# --restricted-command-line to work with the Java backend.
				mercury_cv_javac_flags_for_heap_size_test="-J-Xmx256m"
				mercury_cv_javac_flags_for_heap_size="-J\"-Xmx1024m\""
				if "$JAVAC" "$mercury_cv_javac_flags_for_heap_size_test" -version \
               2> /dev/null
				then
					{ $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
						$as_echo "yes" >&6; }
				else
					{ $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
						$as_echo "no" >&6; }
					mercury_cv_javac_flags_for_heap_size=
				fi
			else
				mercury_cv_javac_flags_for_heap_size=
			fi

		fi


      JAVAC_FLAGS_FOR_HEAP_SIZE=$mercury_cv_javac_flags_for_heap_size
      ;;
   no)
      JAVAC_FLAGS_FOR_HEAP_SIZE=
      ;;
esac
